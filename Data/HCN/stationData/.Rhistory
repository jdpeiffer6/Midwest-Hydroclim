y=1/(8*g)
y
g=100e6
y=1/(8*g)
y
ft=function(t){(2*sin(t)/t)*Mod(exp((0+1i)*101e6*t))}
g=100e6
y=1/(8*g)
for(tau in seq(from=.000001,to=.00001,by=.000001)){
if(round(integrate(ft,0,tau)$value,5)==y){print(tau)}
}
for(tau in seq(from=.000001,to=.00001,by=.000001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=.000001,to=.00001,by=.000001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=0,to=.00000001,by=.000000001)){
print(integrate(ft,0,tau)$value)
}
integrate(ft,0,0)$value
for(tau in seq(from=.000000000001,to=.00000001,by=.000000001)){
print(integrate(ft,0,tau)$value)
}
y
for(tau in seq(from=.000000000001,to=.00000001,by=.0000000000001)){
print(integrate(ft,0,tau)$value)
}
y
for(tau in seq(from=.00000000001,to=.00000001,by=.0000000000001)){
print(integrate(ft,0,tau)$value)
}
tau
y
for(tau in seq(from=5.36e-10,to=.00000001,by=.0000000000001)){
print(integrate(ft,0,tau)$value)
}
y
for(tau in seq(from=5.36e-10,to=.00000001,by=.0000000000001)){
if(round(integrate(ft,0,tau)$value,5)==y){print(tau)}
}
for(tau in seq(from=5.36e-10,to=.00000001,by=.0000000000001)){
print(integrate(ft,0,tau)$value)
}
tau
for(tau in seq(from=5.36e-10,to=6.539e-10,by=.0000000000001)){
if(round(integrate(ft,0,tau)$value,5)==y){print(tau)}
}
for(tau in seq(from=5.36e-10,to=6.539e-10,by=.0000000000001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=5.36e-10,to=6.539e-10,by=.0000000000001)){
if(round(integrate(ft,0,tau)$value,3)==y){print(tau)}
}
for(tau in seq(from=5.36e-10,to=6.539e-10,by=.0000000000001)){
if(round(integrate(ft,0,tau)$value,2)==y){print(tau)}
}
y
rount(1.256767e-9)
round(1.256767e-9)
round(1.256767e-9,2)
round(1.256767e-9,3)
for(tau in seq(from=5.36e-10,to=6.539e-10,by=.0000000000001)){
if(integrate(ft,0,tau)$value==y){print(tau)}
}
y
for(tau in seq(from=.0006,to=.0009,by=.001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=.0006,to=.002,by=.0001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=.0004,to=.002,by=.0001)){
print(integrate(ft,0,tau)$value)
}
g=100
y=1/(8*g)
y
for(tau in seq(from=.0004,to=.0007,by=.0001)){
if(integrate(ft,0,tau)$value==y){print(tau)}
}
for(tau in seq(from=.0004,to=.0007,by=.0001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=.0004,to=.0007,by=.0000001)){
print(integrate(ft,0,tau)$value)
}
for(tau in seq(from=.0004,to=.0007,by=.0000001)){
if(integrate(ft,0,tau)$value==y){print(tau)}
}
for(tau in seq(from=.0004,to=.0007,by=.0000001)){
if(rount(integrate(ft,0,tau)$value,4)==y){print(tau)}
}
for(tau in seq(from=.0004,to=.0007,by=.0000001)){
if(round(integrate(ft,0,tau)$value,4)==y){print(tau)}
}
for(tau in seq(from=.0004,to=.0007,by=.0000001)){
if(round(integrate(ft,0,tau)$value,3)==y){print(tau)}
}
for(tau in seq(from=.0004,to=.0007,by=.0000001)){
if(round(integrate(ft,0,tau)$value,6)==y){print(tau)}
}
.000625e-6
plot(ft)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
ds<-read_csv('C:\Users\JD\Downloads\Values.csv')
ds<-read_csv('C:\\Users\\JD\\Downloads\\Values.csv')
view(ds)
View(ds)
load("C:\\Users\\JD\\Downloads\\mapGOD.Rdata")
mapGOD
ls()
ds
ls()
map
names(map)
colnames(map)
dimnames(map)
dimnames(map)[[1]]
a<-dimnames(map)[[1]]
a
library(xlsx)
utils:::menuInstallPkgs()
q()
qplot
?rep
rep(.5,71)
pts=rep(.5,71)
names(pts)<-a
pts
df<-data.frame(pts)
df
VV=rep(3.5,71)
names(vv)<-a
names(VV)<-a
colnames(df)
colnames(df)<-c('pts','VV')
df$newcolumn<-NA
df
df$def<-NA
df
d<-data.frame(c(1,2,3))
d
d$y<-NA
d
d[1,2]=5
d[1,3]=6
d
d<-data.frame(c(1,2,3))
d$y<-NA
d[1,2]=5
d[3,2]=6
d
colnames(d)<-c("x","y")
d
plot(x,y,data=d)
methods(plot)
?plot
plot(d$x,d$y)
d
cor(d$x,d$y)
?cor
cor(d$x,d$y,na.rm=T)
cor(d$x,d$y,na.rm=TRUE)
cor(d$x,d$y,use="complete.obs")
d[4,]=c(4,1)
d
cor(d$x,d$y,use="complete.obs")
plot(d$x,d#y)
plot(d$x,d$y)
qplot()
library(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
qplot()
d=read.dta('C:\\Users\\JD\\Documents\\College\\zach')
install.packages(foreign)
install.packages("foreign")
library(foreign)
d=read.dta('C:\\Users\\JD\\Documents\\College\\zach')
d=read.dta('C:\\Users\\JD\\Documents\\College\\zach.dta')
d=read.dta('C:/Users/JD/Documents/College/zach.dta')
d=read.dta('C:/Users/JD/Documents/College/data.dta')
load("C:/Users/JD/Box Sync/Data/dd3.Rdata")
View(dd3)
View(dd3[,c(3,4,11)])
plot(dd3$SPECTvdp,dd3$cors)
plot(dd3$SPECTvdp,dd3$cor2D)
plot(dd3$Xevdp,dd3$cor2D)
plot(dd3$Xevdp,dd3$cors)
plot(dd3$FEV1,dd3$cor2D)
cor.test(dd3$FEV1,dd3$cor2D)
load("dd.Rdata")
load("C:/Users/JD/Box Sync/Data/dat.Rdata")
g=ggplot(dat,aes(y=cor3D,x=regXEvdp*100))+geom_point(aes(col=Indication),size=5)+geom_smooth(method='lm',col='orchid3',se=FALSE)
g=g+labs(title='SPECT and 129Xe Correlation \nCoefficent vs VDP',y='Pearson Correlation Coefficent\n Between SPECT and 129Xe',x='VDP in 129Xe')
g=g+scale_colour_brewer(palette = "Set2")+theme_bw()+theme(legend.position = c(0.78, 0.85),legend.background = element_rect(color = "black", size = 1, linetype = "solid"),legend.text=element_text(size=25))
g=g+theme(text=element_text(family="sans"),axis.text=element_text(size=17),axis.title=element_text(size=20,face="bold"),title=element_text(size=16,face="bold"))
a=cor.test(dat$cor3D,dat$regXEvdp)$estimate
g=g+geom_text(x=10,y=.65,label=paste('r = ',round(a,3),sep=''),size=5)
plot(g+p)
library(ggplot2)
#Pixel by Pixel using VDP from registered-- same results
g=ggplot(dat,aes(y=cor3D,x=regXEvdp*100))+geom_point(aes(col=Indication),size=5)+geom_smooth(method='lm',col='orchid3',se=FALSE)
g=g+labs(title='SPECT and 129Xe Correlation \nCoefficent vs VDP',y='Pearson Correlation Coefficent\n Between SPECT and 129Xe',x='VDP in 129Xe')
g=g+scale_colour_brewer(palette = "Set2")+theme_bw()+theme(legend.position = c(0.78, 0.85),legend.background = element_rect(color = "black", size = 1, linetype = "solid"),legend.text=element_text(size=25))
g=g+theme(text=element_text(family="sans"),axis.text=element_text(size=17),axis.title=element_text(size=20,face="bold"),title=element_text(size=16,face="bold"))
a=cor.test(dat$cor3D,dat$regXEvdp)$estimate
g=g+geom_text(x=10,y=.65,label=paste('r = ',round(a,3),sep=''),size=5)
plot(g+p)
ggplot
library("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(Rcpp)
install.packages("Rcpp")
library(Rcpp)
library(ggplot2)
#Pixel by Pixel using VDP from registered-- same results
g=ggplot(dat,aes(y=cor3D,x=regXEvdp*100))+geom_point(aes(col=Indication),size=5)+geom_smooth(method='lm',col='orchid3',se=FALSE)
g=g+labs(title='SPECT and 129Xe Correlation \nCoefficent vs VDP',y='Pearson Correlation Coefficent\n Between SPECT and 129Xe',x='VDP in 129Xe')
g=g+scale_colour_brewer(palette = "Set2")+theme_bw()+theme(legend.position = c(0.78, 0.85),legend.background = element_rect(color = "black", size = 1, linetype = "solid"),legend.text=element_text(size=25))
g=g+theme(text=element_text(family="sans"),axis.text=element_text(size=17),axis.title=element_text(size=20,face="bold"),title=element_text(size=16,face="bold"))
a=cor.test(dat$cor3D,dat$regXEvdp)$estimate
g=g+geom_text(x=10,y=.65,label=paste('r = ',round(a,3),sep=''),size=5)
plot(g+p)
plot(g)
load("C:/Users/JD/Box Sync/Data/panda.Rdata")
View(panda)
load("C:/Users/JD/Box Sync/Scanz/Everything2/263.Rdata")
load("C:/Users/JD/Box Sync/Programs/180801.RData")
makeSlide(SPECT$i)
makeSlide(Xe$i)
makeSlide(Xenon$Xe)
load("C:/Users/JD/Box Sync/Scanz/Everything2/292.Rdata")
makeSlide(Xenon$Xe)
makeSlide(SPECT$i)
load("C:/Users/JD/Box Sync/Scanz/Everything2/298.Rdata")
makeSlide(Xenon$Xe)
load("C:/Users/JD/Box Sync/Scanz/Everything2/361.Rdata")
makeSlide(Xenon$Xe)
makeSlide(SPECT$i)
load("C:/Users/JD/Box Sync/Scanz/Everything2/269.Rdata")
makeSlide(SPECT$i)
makeSlide(Xenon$Xe)
load("C:/Users/JD/Box Sync/Scanz/Everything2/448.Rdata")
makeSlide(Xenon$Xe)
makeSlide(SPECT$i)
load("C:/Users/JD/Box Sync/Scanz/Everything2/305.Rdata")
makeSlide(SPECT$i)
makeSlide(Xenon$Xe)
load("C:/Users/JD/Box Sync/Scanz/Everything2/314.Rdata")
makeSlide(Xenon$Xe)
read.csv(file.choose())
d=read.csv(file.choose())
colnames(d)
levels(d$Year)
levels(d$Month)
x=subset(d,'Month'=="Total")
x=subset(d,'Month'=='Total')
x=subset(d,Month=='Total')
names(x)
x$Value
View(x)
x[1031,]
x[80,]
x[80,'value']
x[80,'Value']
x[80,'Value']/sum(x$Value)
(x[80,'Value']/sum(x$Value))*100
install.packages("RClimDex")
?fft
y=c(rep(1,500),rep(-1,500))
y
plot(y)
plot(rep(y,5)_
plot(rep(y,5))
fft(y)
f=fft(y)
plot(f)
plot(Re(f))
plot(Mod(f))
u=1+2i
u
Mod(u)
sqrt(5)
x=seq(-pi,pi)
plot(x)
plot(sin(x)
)
x=seq(-pi,pi,0.1)
x=seq(-pi,pi,0.0001)
x=seq(-pi,pi,110000)
a=1  #Excuete this line of code by placing your cursor anywhere on line 6 and pressing "Ctrl+Enter"
View(ds)
rm(ds)
rm(map)
d=seq(1,2,3)
d=seq(1,3,2)
d=seq(1,3,1)
e=rep(2,3)       #repeats the number 2, 3 times
print(a)
f="a"     #a single letter in quotes is called a "Character"
g="apple" #multiple letters in quotes is called a "String"
g
g[1]
stringVector=c("Programming","is","fun")
stringVecot[1]
stringVector[1]
print(stringVector)
charVector=rep("A",5)
print(charVector)
small=c(TRUE,FALSE)
bit=rep(small,5)
print(big)
big=rep(small,5)
print(big)
h[6]
h=seq(1,10,1)  #First, let's create a vector to index
h[6]
i=rep(1,100,10)
i
h=seq(1,10,1)  #First, let's create a vector to index
print(h[6])    #Call the vector you want to index, in this case "h", and in brackets, the location of the value you want
?rep
i=seq(1,100,10)
i=seq(1,100,2)
i=seq(1,100,2)
print(h[2])
i
i=seq(1,100,2)
print(i[2])
?c
x=1:10
y=10:20
x
y
df=data.frame(x,y)
y=11:20
df=data.frame(x,y)
View(df)
names(df)
df$x
?apply
dim(df)
apply(df,1,max)
apply(df,c(1,2),max)
apply(df,c(,2),max)
apply(df,2,max)
apply(df,c(,2),max,na.rm=T)
apply(df,2,max,na.rm=T)
?st.dev
?stdev
install.packages("hydroTSM")
install.packages("ggplot2")
stats3=function(df){
mean=mean(df)
median=median(df)
sd=sd(df)
print(paste("Mean: ",mean,"Median: ",median,"Stdev: ",sd))
return(c(mean,median,sd))
}
setwd("C:\\Users\\JD\\Documents\\R-Tutorial\\data")    #you will need to change this
dir()    #this views the files in your working directory
lib1 <- c("hydroTSM", "ggplot2","rnoaa") # only these for the time being
lapply(X = lib1, FUN = require, character.only = T)
files=list.files(pattern="csv")
prcpPath=files[3]       #this defines the PATHS to the files we want to look at
tmaxPath=files[1]
tminPath=files[2]
prcp=read.csv(prcpPath)
tmax=read.csv(tmaxPath)
tmin=read.csv(tminPath)
tavg = 0.5 * (tmax + tmin)
# 3) ----------------------------------------------------------------------
start.date <- as.Date("1950-01-01")
end.date <- as.Date("2017-12-31")
date1 <- data.frame(date = dip(start.date, end.date))
View(date1)
date1$year <- as.numeric(format(date1$date, "%Y"))
date1$month <- as.numeric(format(date1$date, "%m"))
date1$day <- as.numeric(format(date1$date, "%d"))
date1$doy <- as.numeric(format(date1$date, "%j"))
View(date1)
?aggregate
prcp_month <- daily2monthly(x = prcp, FUN = sum, dates = date1$date,
date.fmt = "%Y-%m-%d", na.rm = T,
out.type = "data.frame")
prcp_annual <- daily2annual(x = prcp, FUN = sum, dates = date1$date,
date.fmt = "%Y-%m-%d", na.rm = T,
out.type = "data.frame")
#task 1
prcp_annual30_avg <- apply(X = prcp_annual[39:68,], MARGIN = 2, FUN = mean)
View(prcp_annual30_avg)
#task 2 Calculate the mean, median, and variability (1 standard deviation)
#within the 88 gages . Use the subset() and apply() functions.
mean(prcp_annual30_avg)
median(prcp_annual30_avg)
sd(prcp_annual30_avg)
#task 3
prcp_annual30_max <- apply(X = prcp_annual[39:68,], MARGIN = 2, FUN = max)
View(prcp_annual30_max)
mean(prcp_annual30_max)
median(prcp_annual30_max)
sd(prcp_annual30_max)
#task 4
prcp_annual30_min <- apply(X = prcp_annual[39:68,], MARGIN = 2, FUN = min)
View(prcp_annual30_min)
mean(prcp_annual30_min)
median(prcp_annual30_min)
sd(prcp_annual30_min)
hist(x = prcp_annual30_avg, breaks = 8,
col = "blue",                     # bar color
main = "Annual Precipitation",    # main title
xlab = "precipitation, mm/yr",    # x-axis label
ylab = "count")                   # y-axis label
range(prcp_annual30_avg)
# 4) ----------------------------------------------------------------------
prcp_temp <- cbind(prcp, date1)
#task 1
pr1 <- subset(x = prcp_temp, subset = prcp_temp$month > 2 & prcp_temp$month < 6)
View(pr1)
rm(ls())
rm(list=ls())
install.packages("hydroTSM")
install.packages("ggplot2")
stats3=function(df){
mean=mean(df)
median=median(df)
sd=sd(df)
print(paste("Mean: ",mean,"Median: ",median,"Stdev: ",sd))
return(c(mean,median,sd))
}
setwd("C:\\Users\\JD\\Documents\\R-Tutorial\\data")    #you will need to change this
dir()    #this views the files in your working directory
lib1 <- c("hydroTSM", "ggplot2","rnoaa") # only these for the time being
lapply(X = lib1, FUN = require, character.only = T)
files=list.files(pattern="csv")
prcpPath=files[3]       #this defines the PATHS to the files we want to look at
tmaxPath=files[1]
tminPath=files[2]
prcp=read.csv(prcpPath)
tmax=read.csv(tmaxPath)
tmin=read.csv(tminPath)
tavg = 0.5 * (tmax + tmin)
# 3) ----------------------------------------------------------------------
start.date <- as.Date("1950-01-01")
end.date <- as.Date("2017-12-31")
date1 <- data.frame(date = dip(start.date, end.date))
View(date1)
date1$year <- as.numeric(format(date1$date, "%Y"))
date1$month <- as.numeric(format(date1$date, "%m"))
date1$day <- as.numeric(format(date1$date, "%d"))
date1$doy <- as.numeric(format(date1$date, "%j"))
View(date1)
install.packages("hydroTSM")
View(date1$date)
date1$date
dim(prcp)
dim(dates)
dim(date1)
View(date1)
View(prcp)
##-------
prcp_month <- daily2monthly(x = prcp, FUN = sum, dates = date1$date,
date.fmt = "%Y-%m-%d", na.rm = T,
out.type = "data.frame")
library(hydroTSM)
##-------
prcp_month <- daily2monthly(x = prcp, FUN = sum, dates = date1$date,
date.fmt = "%Y-%m-%d", na.rm = T,
out.type = "data.frame")
prcp_annual <- daily2annual(x = prcp, FUN = sum, dates = date1$date,
date.fmt = "%Y-%m-%d", na.rm = T,
out.type = "data.frame")
View(prcp_annual)
#task 1
prcp_annual30_avg <- apply(X = prcp_annual[39:68,], MARGIN = 2, FUN = mean)
View(prcp_annual30_avg)
#task 2 Calculate the mean, median, and variability (1 standard deviation)
#within the 88 gages . Use the subset() and apply() functions.
mean(prcp_annual30_avg)
hist(x = prcp_annual30_avg, breaks = 8,
col = "blue",                     # bar color
main = "Annual Precipitation",    # main title
xlab = "precipitation, mm/yr",    # x-axis label
ylab = "count")                   # y-axis label
range(prcp_annual30_avg)
prcp_temp <- cbind(prcp, date1)
View(prcp_temp)
#task 1
pr1 <- subset(x = prcp_temp, subset = prcp_temp$month > 2 & prcp_temp$month < 6)
prcp_spring <- aggregate(x = pr1[,1:88], by = list(pr1$year), FUN = sum, na.rm = T)  #ok thats pretty cool
View(prcp_spring)
rownames(prcp_spring)=prcp_spring$Group.1
prcp_spring=prcp_spring[,2:89]
View(prcp_spring)
prcp_spring30_avg= apply(X = prcp_spring[39:68,], MARGIN = 2, FUN = mean)
prcp_spring30_avg= apply( X = prcp_spring[39:68,], MARGIN = 2, FUN = mean)
View(prcp_spring30_avg)
getwd()
# 1. Identify list of files that are precipition --------------------------
setwd("C:\\Users\\JD\\Documents\\StateParks\\Data\\HCN\\stationData")
listOfData=dir(pattern="PRCP")
listOfData
?for
